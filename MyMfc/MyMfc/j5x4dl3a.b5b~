
// MyMfcDlg.cpp: 实现文件
//

#include "pch.h"
#include "framework.h"
#include "MyMfc.h"
#include "MyMfcDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CMyMfcDlg 对话框



CMyMfcDlg::CMyMfcDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_MYMFC_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMyMfcDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CMyMfcDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CMyMfcDlg::OnBnClickedButton1)
END_MESSAGE_MAP()


// CMyMfcDlg 消息处理程序
typedef enum _THREADINFOCLASS
{
	ThreadBasicInformation,
	ThreadTimes,
	ThreadPriority,
	ThreadBasePriority,
	ThreadAffinityMask,
	ThreadImpersonationToken,
	ThreadDescriptorTableEntry,
	ThreadEnableAlignmentFaultFixup,
	ThreadEventPair_Reusable,
	ThreadQuerySetWin32StartAddress,
	ThreadZeroTlsCell,
	ThreadPerformanceCount,
	ThreadAmILastThread,
	ThreadIdealProcessor,
	ThreadPriorityBoost,
	ThreadSetTlsArrayAddress,
	ThreadIsIoPending,
	ThreadHideFromDebugger,
	ThreadBreakOnTermination,
	MaxThreadInfoClass
}THREADINFOCLASS;
typedef struct _CLIENT_ID
{
	HANDLE UniqueProcess;
	HANDLE UniqueThread;
}CLIENT_ID;
typedef struct _THREAD_BASIC_INFORMATION
{
	LONG ExitStatus;
	PVOID TebBaseAddress;
	CLIENT_ID ClientId;
	LONG AffinityMask;
	LONG Priority;
	LONG BasePriority;
}THREAD_BASIC_INFORMATION, * PTHREAD_BASIC_INFORMATION;


extern "C" LONG(__stdcall * ZwQueryInformationThread)(
	IN HANDLE ThreadHandle,
	IN THREADINFOCLASS ThreadInformationClass,
	OUT PVOID ThreadInformation,
	IN ULONG ThreadInformationLength,
	OUT PULONG ReturnLength OPTIONAL
	) = NULL;
LONG(__stdcall* _NtReadVirtualMemory)(
	IN HANDLE ProcessHandle,
	IN PVOID BaseAddress,
	OUT PVOID Buffer,
	IN SIZE_T NumberOfBytesToRead,
	OUT PSIZE_T NumberOfBytesRead
	);


int CMyMfcDlg::ReadLONG(__int64 内存地址)
{
	__int64 Ret = 0;  DWORD 保护属性;
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 8, PAGE_EXECUTE_READWRITE, &保护属性);

	(FARPROC&)_NtReadVirtualMemory = ::GetProcAddress(GetModuleHandle("ntdll.dll"), "NtReadVirtualMemory");

	_NtReadVirtualMemory(Game_Handle, (PVOID)内存地址, &Ret, 8, 0);
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 8, 保护属性, &保护属性);
	return Ret;
}

int CMyMfcDlg::ReadINT(int 内存地址)
{
	int Ret = 0;  DWORD 保护属性;
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, PAGE_EXECUTE_READWRITE, &保护属性);
	(FARPROC&)_NtReadVirtualMemory = ::GetProcAddress(GetModuleHandle("ntdll.dll"), "NtReadVirtualMemory");

	printf("地址：%p\n", _NtReadVirtualMemory);
	_NtReadVirtualMemory(Game_Handle, (PVOID)内存地址, &Ret, 4, 0);
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, 保护属性, &保护属性);
	return Ret;
}


__int64 CMyMfcDlg::Readint(__int64 Address)
{


	__int64 Ret = 0 ;
	if (::ReadProcessMemory(Game_Handle, (void*)Address, &Ret, 8, 0) == true)
		return Ret;
	else
		AfxMessageBox("读取Game内存失败");

}


bool CMyMfcDlg::Writeint(__int64 Address, int data)
{

	if (::WriteProcessMemory(Game_Handle, (void*)Address, &data,4, 0) == true)
		return true;
	else
		AfxMessageBox("写入Game内存失败");

}

__int64 CMyMfcDlg::GetProcessModule(DWORD Pid, char Name[])
{

	MODULEENTRY32 module = { 0 };

	__int64 temp = 0;

	HANDLE hModuleSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, Pid);
	HANDLE modules = 0;
	if (hModuleSnap != 0)
	{
		module.dwSize = sizeof(MODULEENTRY32);

		modules = (HANDLE)Module32First(hModuleSnap, &module);

		while (modules != 0)
		{
			if (_strcmpi(module.szModule, Name) == 0)
			{
				CloseHandle(hModuleSnap);

				temp = (__int64)module.modBaseAddr;
				return temp;
			}

			modules = (HANDLE)Module32Next(hModuleSnap, &module);
		}
		CloseHandle(hModuleSnap);
	}

	return -1;
}




BOOL CMyMfcDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	
	CWnd* Game_Wnd = FindWindow(NULL, "地下城与勇士");


	if (!Game_Wnd)
	{
		AfxMessageBox("游戏未运行，程序初始化失败");

		this->OnOK();
	}

	 ::GetWindowThreadProcessId(Game_Wnd->m_hWnd, &Pid);

	 CString Text;
	 Text.Format("Pid：%d", Pid);

	 this->SetWindowTextA(Text);
	 Game_Handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, Pid);


	 if (!Game_Handle)
		 AfxMessageBox("打开游戏进程失败");



	 AllocConsole();

	 FILE* Ftp = freopen("CONOUT$", "w", stdout);









	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CMyMfcDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CMyMfcDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CMyMfcDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


void CMyMfcDlg::OnBnClickedButton1()
{


	printf("模块地址：%p\n", GetProcessModule(Pid, "DNF.exe"));

	printf("AAA%p\n", ReadLONG(GetProcessModule(Pid, "DNF.exe")));
    __int64 邮件地址 =ReadLONG(ReadLONG(ReadLONG(ReadLONG(0X14B714B30) + 0x9EB0)+ 0x80) + 0x30); //ReadLONG(ReadLONG(ReadLONG(ReadLONG(ReadINT(GetProcessModule(Pid, "DNF.exe") + 0xB70CB30) + 0x9EB0) + 0x80) + 0x30) + 0x30);
	
	printf("%p\n", 邮件地址);
		/*__int64  邮件地址1 =ReadINT(5560650544);
		cs.Format("邮件地址1：%p\n", 邮件地址1);

		AfxMessageBox(cs);*/



//
	//Writeint(ReadINT(ReadINT(ReadINT(ReadINT(ReadINT(GetProcessModule(Pid, "DNF.exe") + 0xB70CB30) + 0x9EB0) + 0x80) + 0x30) + 0x30), 100090444);


	AfxMessageBox("卡邮件初始化完毕");

	// TODO: 在此添加控件通知处理程序代码
}
