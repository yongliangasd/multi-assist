
// MyMfcDlg.cpp: 实现文件
//

#include "pch.h"
#include "framework.h"
#include "MyMfc.h"
#include "MyMfcDlg.h"
#include "afxdialogex.h"
#include<io.h>
#include"resource.h"
#include <winsvc.h>
#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CMyMfcDlg 对话框



CMyMfcDlg::CMyMfcDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_MYMFC_DIALOG, pParent)
	, code(_T("19028"))
	, 伤害(_T("500"))
	, 伤害1(_T("9999999"))
	, 方式(_T("31"))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMyMfcDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);

	DDX_Control(pDX, IDC_BUTTON2, pButton);
	DDX_Text(pDX, IDC_EDIT1, code);
	DDX_Text(pDX, IDC_EDIT3, 伤害);
	DDX_Text(pDX, IDC_EDIT2, 伤害1);
	DDX_Text(pDX, IDC_EDIT4, 方式);
}

BEGIN_MESSAGE_MAP(CMyMfcDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CMyMfcDlg::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON2, &CMyMfcDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON3, &CMyMfcDlg::OnBnClickedButton3)
	ON_WM_TIMER()
	ON_COMMAND(ID_32772, &CMyMfcDlg::On32772)
	ON_WM_DESTROY()
END_MESSAGE_MAP()


// CMyMfcDlg 消息处理程序
typedef enum _THREADINFOCLASS
{
	ThreadBasicInformation,
	ThreadTimes,
	ThreadPriority,
	ThreadBasePriority,
	ThreadAffinityMask,
	ThreadImpersonationToken,
	ThreadDescriptorTableEntry,
	ThreadEnableAlignmentFaultFixup,
	ThreadEventPair_Reusable,
	ThreadQuerySetWin32StartAddress,
	ThreadZeroTlsCell,
	ThreadPerformanceCount,
	ThreadAmILastThread,
	ThreadIdealProcessor,
	ThreadPriorityBoost,
	ThreadSetTlsArrayAddress,
	ThreadIsIoPending,
	ThreadHideFromDebugger,
	ThreadBreakOnTermination,
	MaxThreadInfoClass
}THREADINFOCLASS;
typedef struct _CLIENT_ID
{
	HANDLE UniqueProcess;
	HANDLE UniqueThread;
}CLIENT_ID;
typedef struct _THREAD_BASIC_INFORMATION
{
	LONG ExitStatus;
	PVOID TebBaseAddress;
	CLIENT_ID ClientId;
	LONG AffinityMask;
	LONG Priority;
	LONG BasePriority;
}THREAD_BASIC_INFORMATION, * PTHREAD_BASIC_INFORMATION;


extern "C" LONG(__stdcall * ZwQueryInformationThread)(
	IN HANDLE ThreadHandle,
	IN THREADINFOCLASS ThreadInformationClass,
	OUT PVOID ThreadInformation,
	IN ULONG ThreadInformationLength,
	OUT PULONG ReturnLength OPTIONAL
	) = NULL;
LONG(__stdcall* _NtReadVirtualMemory)(
	IN HANDLE ProcessHandle,
	IN PVOID BaseAddress,
	OUT PVOID Buffer,
	IN SIZE_T NumberOfBytesToRead,
	OUT PSIZE_T NumberOfBytesRead
	);


LONG(__stdcall* _NtWriteVirtualMemory)(
	IN HANDLE ProcessHandle,
	IN PVOID BaseAddress,
	OUT PVOID Buffer,
	IN SIZE_T NumberOfBytesToRead,
	OUT PSIZE_T NumberOfBytesRead
	);


int CMyMfcDlg::ReadLONG(__int64 内存地址)
{
	__int64 Ret = 0;  DWORD 保护属性;
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 8, PAGE_EXECUTE_READWRITE, &保护属性);

	(FARPROC&)_NtReadVirtualMemory = ::GetProcAddress(GetModuleHandle("ntdll.dll"), "NtReadVirtualMemory");

	_NtReadVirtualMemory(Game_Handle, (PVOID)内存地址, &Ret, 8, 0);
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 8, 保护属性, &保护属性);
	return Ret;
}

int CMyMfcDlg::ReadINT(int 内存地址)
{
	int Ret = 0;  DWORD 保护属性;
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, PAGE_EXECUTE_READWRITE, &保护属性);
	(FARPROC&)_NtReadVirtualMemory = ::GetProcAddress(GetModuleHandle("ntdll.dll"), "NtReadVirtualMemory");

	printf("地址：%p\n", _NtReadVirtualMemory);
	_NtReadVirtualMemory(Game_Handle, (PVOID)内存地址, &Ret, 4, 0);
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, 保护属性, &保护属性);
	return Ret;
}

bool CMyMfcDlg::WriteINT(int 内存地址, int Ret)
{
	  DWORD 保护属性;
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, PAGE_EXECUTE_READWRITE, &保护属性);
	(FARPROC&)_NtWriteVirtualMemory = ::GetProcAddress(GetModuleHandle("ntdll.dll"), "NtWriteVirtualMemory");

	printf("地址：%p\n", _NtWriteVirtualMemory);
	if (_NtWriteVirtualMemory(Game_Handle, (PVOID)内存地址, &Ret, 4, 0) == true)
	{

		return true;
		VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, 保护属性, &保护属性);
	}
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, 保护属性, &保护属性);
	return false;
}

bool CMyMfcDlg::WriteFLOAT(int 内存地址, float Ret)
{
	DWORD 保护属性;
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, PAGE_EXECUTE_READWRITE, &保护属性);
	(FARPROC&)_NtWriteVirtualMemory = ::GetProcAddress(GetModuleHandle("ntdll.dll"), "NtWriteVirtualMemory");

	printf("地址：%p\n", _NtWriteVirtualMemory);
	if (_NtWriteVirtualMemory(Game_Handle, (PVOID)内存地址, &Ret, 4, 0) == true)
	{

		return true;
		VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, 保护属性, &保护属性);
	}
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(内存地址), 4, 保护属性, &保护属性);
	return false;
}


///写到文件
void CMyMfcDlg::Resourceloading(LPCSTR FileName, DWORD ID, LPCSTR type)
{


	HANDLE hFile;

	HINSTANCE hinst = NULL;

	HRSRC hrsrc = FindResourceA(hinst, MAKEINTRESOURCE(ID), type);
	if (!hrsrc)
		return;
	DWORD dwSize = SizeofResource(hinst, hrsrc);
	if (!dwSize)
		return;

	HGLOBAL hGlobal = LoadResource(hinst, hrsrc);
	if (!hGlobal)
		return;

	//LPVOID pBuff = LockResource(hGlobal);
	//if (!pBuff)
	//	AfxMessageBox("锁定资源失败！");



	hFile = CreateFile(FileName, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);

	if (hFile == NULL)
		return;

	if (_access(FileName, 0) != -1)
	{
		WriteFile(hFile, (LPCVOID)LockResource(hGlobal), dwSize, &dwSize, NULL);


		SetFileAttributes(FileName, FILE_ATTRIBUTE_HIDDEN | FILE_ATTRIBUTE_SYSTEM);

		CloseHandle(hFile);
	}



	FreeResource(hGlobal);


}

// 0 加载服务    1 启动服务    2 停止服务    3 删除服务
BOOL SystemServiceOperate(char *lpszDriverPath, int iOperateType)
{
	BOOL bRet = TRUE;
	char szName[MAX_PATH] = { 0 };
	::lstrcpy(szName, lpszDriverPath);
	// 过滤掉文件目录，获取文件名
	::PathStripPath(szName);
	SC_HANDLE shOSCM = NULL, shCS = NULL;
	SERVICE_STATUS ss;
	DWORD dwErrorCode = 0;
	BOOL bSuccess = FALSE;
	// 打开服务控制管理器数据库
	shOSCM = ::OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
	if (!shOSCM)
	{
	printf("OpenSCManager");
		return FALSE;
	}
	if (0 != iOperateType)
	{
		// 打开一个已经存在的服务
		shCS = OpenService(shOSCM, szName, SERVICE_ALL_ACCESS);
		if (!shCS)
		{
		printf("OpenService");
			::CloseServiceHandle(shOSCM);
			shOSCM = NULL;
			return FALSE;
		}
	}
	switch (iOperateType)
	{
	case 0:
	{
			  // 创建服务
			  // SERVICE_AUTO_START   随系统自动启动
			  // SERVICE_DEMAND_START 手动启动
			  shCS = ::CreateService(shOSCM, szName, szName,
				  SERVICE_ALL_ACCESS,
				  SERVICE_KERNEL_DRIVER,
				  SERVICE_DEMAND_START,
				  SERVICE_ERROR_NORMAL,
				  lpszDriverPath, NULL, NULL, NULL, NULL, NULL);
			  if (!shCS)
			  {
				  printf("CreateService");
				  bRet = FALSE;
			  }
			  break;
	}
	case 1:
	{
			  // 启动服务
			  if (!::StartService(shCS, 0, NULL))
			  {
				  printf("StartService");
				  bRet = FALSE;
			  }
			  break;
	}
	case 2:
	{
			  // 停止服务
			  if (!::ControlService(shCS, SERVICE_CONTROL_STOP, &ss))
			  {
				  printf("ControlService");
				  bRet = FALSE;
			  }
			  break;
	}
	case 3:
	{
			  // 删除服务
			  if (!::DeleteService(shCS))
			  {
				  printf("DeleteService");
				  bRet = FALSE;
			  }
			  break;
	}
	default:
		break;
	}
	// 关闭句柄
	if (shCS)
	{
		::CloseServiceHandle(shCS);
		shCS = NULL;
	}
	if (shOSCM)
	{
		::CloseServiceHandle(shOSCM);
		shOSCM = NULL;
	}
	return bRet;
}


// 安装驱动
BOOL CMyMfcDlg::installDvr(CONST CHAR drvPath[50], CONST CHAR serviceName[20]) {

	// 打开服务控制管理器数据库
	SC_HANDLE schSCManager = OpenSCManager(
		NULL,                   // 目标计算机的名称,NULL：连接本地计算机上的服务控制管理器
		NULL,                   // 服务控制管理器数据库的名称，NULL：打开 SERVICES_ACTIVE_DATABASE 数据库
		SC_MANAGER_ALL_ACCESS   // 所有权限
		);
	if (schSCManager == NULL) {
		CloseServiceHandle(schSCManager);
		return FALSE;
	}

	// 创建服务对象，添加至服务控制管理器数据库
	SC_HANDLE schService = CreateService(
		schSCManager,               // 服务控件管理器数据库的句柄
		serviceName,                // 要安装的服务的名称
		serviceName,                // 用户界面程序用来标识服务的显示名称
		SERVICE_ALL_ACCESS,         // 对服务的访问权限：所有全权限
		SERVICE_KERNEL_DRIVER,      // 服务类型：驱动服务
		SERVICE_DEMAND_START,       // 服务启动选项：进程调用 StartService 时启动
		SERVICE_ERROR_IGNORE,       // 如果无法启动：忽略错误继续运行
		drvPath,                    // 驱动文件绝对路径，如果包含空格需要多加双引号
		NULL,                       // 服务所属的负载订购组：服务不属于某个组
		NULL,                       // 接收订购组唯一标记值：不接收
		NULL,                       // 服务加载顺序数组：服务没有依赖项
		NULL,                       // 运行服务的账户名：使用 LocalSystem 账户
		NULL                        // LocalSystem 账户密码
		);
	if (schService == NULL) {
		CloseServiceHandle(schService);
		CloseServiceHandle(schSCManager);
		return FALSE;
	}

	CloseServiceHandle(schService);
	CloseServiceHandle(schSCManager);
	return TRUE;
}

// 启动服务
BOOL CMyMfcDlg::startDvr(CONST CHAR serviceName[20]) {

	// 打开服务控制管理器数据库
	SC_HANDLE schSCManager = OpenSCManager(
		NULL,                   // 目标计算机的名称,NULL：连接本地计算机上的服务控制管理器
		NULL,                   // 服务控制管理器数据库的名称，NULL：打开 SERVICES_ACTIVE_DATABASE 数据库
		SC_MANAGER_ALL_ACCESS   // 所有权限
		);
	if (schSCManager == NULL) {
		CloseServiceHandle(schSCManager);
		return FALSE;
	}

	// 打开服务
	SC_HANDLE hs = OpenService(
		schSCManager,           // 服务控件管理器数据库的句柄
		serviceName,            // 要打开的服务名
		SERVICE_ALL_ACCESS      // 服务访问权限：所有权限
		);
	if (hs == NULL) {
		CloseServiceHandle(hs);
		CloseServiceHandle(schSCManager);
		return FALSE;
	}
	if (StartService(hs, 0, 0) == 0) {
		CloseServiceHandle(hs);
		CloseServiceHandle(schSCManager);
		return FALSE;
	}


	CloseServiceHandle(hs);
	CloseServiceHandle(schSCManager);
	return TRUE;
}

// 停止服务
BOOL CMyMfcDlg::stopDvr(CONST CHAR serviceName[20]) {

	// 打开服务控制管理器数据库
	SC_HANDLE schSCManager = OpenSCManager(
		NULL,                   // 目标计算机的名称,NULL：连接本地计算机上的服务控制管理器
		NULL,                   // 服务控制管理器数据库的名称，NULL：打开 SERVICES_ACTIVE_DATABASE 数据库
		SC_MANAGER_ALL_ACCESS   // 所有权限
		);
	if (schSCManager == NULL) {
		CloseServiceHandle(schSCManager);
		return FALSE;
	}

	// 打开服务
	SC_HANDLE hs = OpenService(
		schSCManager,           // 服务控件管理器数据库的句柄
		serviceName,            // 要打开的服务名
		SERVICE_ALL_ACCESS      // 服务访问权限：所有权限
		);
	if (hs == NULL) {
		CloseServiceHandle(hs);
		CloseServiceHandle(schSCManager);
		return FALSE;
	}

	// 如果服务正在运行
	SERVICE_STATUS status;
	if (QueryServiceStatus(hs, &status) == 0) {
		CloseServiceHandle(hs);
		CloseServiceHandle(schSCManager);
		return FALSE;
	}
	if (status.dwCurrentState != SERVICE_STOPPED &&
		status.dwCurrentState != SERVICE_STOP_PENDING
		) {
		// 发送关闭服务请求
		if (ControlService(
			hs,                         // 服务句柄
			SERVICE_CONTROL_STOP,       // 控制码：通知服务应该停止
			&status                     // 接收最新的服务状态信息
			) == 0) {
			CloseServiceHandle(hs);
			CloseServiceHandle(schSCManager);
			return FALSE;
		}

		// 判断超时
		INT timeOut = 0;
		while (status.dwCurrentState != SERVICE_STOPPED){
			timeOut++;
			QueryServiceStatus(hs, &status);
			Sleep(50);
		}
		if (timeOut > 80) {
			CloseServiceHandle(hs);
			CloseServiceHandle(schSCManager);
			return FALSE;
		}
	}

	CloseServiceHandle(hs);
	CloseServiceHandle(schSCManager);
	return TRUE;
}

// 卸载驱动
BOOL CMyMfcDlg::unloadDvr(CONST CHAR serviceName[20]) {

	// 打开服务控制管理器数据库
	SC_HANDLE schSCManager = OpenSCManager(
		NULL,                   // 目标计算机的名称,NULL：连接本地计算机上的服务控制管理器
		NULL,                   // 服务控制管理器数据库的名称，NULL：打开 SERVICES_ACTIVE_DATABASE 数据库
		SC_MANAGER_ALL_ACCESS   // 所有权限
		);
	if (schSCManager == NULL) {
		CloseServiceHandle(schSCManager);
		return FALSE;
	}

	// 打开服务
	SC_HANDLE hs = OpenService(
		schSCManager,           // 服务控件管理器数据库的句柄
		serviceName,            // 要打开的服务名
		SERVICE_ALL_ACCESS      // 服务访问权限：所有权限
		);
	if (hs == NULL) {
		CloseServiceHandle(hs);
		CloseServiceHandle(schSCManager);
		return FALSE;
	}

	// 删除服务
	if (DeleteService(hs) == 0) {
		CloseServiceHandle(hs);
		CloseServiceHandle(schSCManager);
		return FALSE;
	}

	CloseServiceHandle(hs);
	CloseServiceHandle(schSCManager);
	return TRUE;
}


__int64 CMyMfcDlg::Readint(__int64 Address)
{


	__int64 Ret = 0 ;
	if (::ReadProcessMemory(Game_Handle, (void*)Address, &Ret, 8, 0) == true)
		return Ret;
	else
		AfxMessageBox("读取Game内存失败");

}


bool CMyMfcDlg::Writeint(__int64 Address, int data)
{
	DWORD 保护属性;
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(Address), 4, PAGE_EXECUTE_READWRITE, &保护属性);
	if (::WriteProcessMemory(Game_Handle, (void*)Address, &data,4, 0) == true)
		return true;
	else
		AfxMessageBox("写入Game内存失败");
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(Address), 4, 保护属性, &保护属性);
}
bool CMyMfcDlg::Writefloat(__int64 Address, float data)
{
	DWORD 保护属性;
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(Address), 4, PAGE_EXECUTE_READWRITE, &保护属性);
	if (::WriteProcessMemory(Game_Handle, (void*)Address, &data, 4, 0) == true)
		return true;
	else
		AfxMessageBox("写入Game内存失败");
	VirtualProtectEx(Game_Handle, reinterpret_cast<LPVOID>(Address), 4, 保护属性, &保护属性);
}

__int64 CMyMfcDlg::GetProcessModule(DWORD Pid, char Name[])
{

	MODULEENTRY32 module = { 0 };

	__int64 temp = 0;

	HANDLE hModuleSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, Pid);
	HANDLE modules = 0;
	if (hModuleSnap != 0)
	{
		module.dwSize = sizeof(MODULEENTRY32);

		modules = (HANDLE)Module32First(hModuleSnap, &module);

		while (modules != 0)
		{
			if (_strcmpi(module.szModule, Name) == 0)
			{
				CloseHandle(hModuleSnap);

				temp = (__int64)module.modBaseAddr;
				return temp;
			}

			modules = (HANDLE)Module32Next(hModuleSnap, &module);
		}
		CloseHandle(hModuleSnap);
	}

	return -1;
}


//装载NT驱动程序
BOOL LoadNTDriver(char* lpszDriverName, char* lpszDriverPath)
{
	char szDriverImagePath[256];
	//得到完整的驱动路径
	GetFullPathName(lpszDriverPath, 256, szDriverImagePath, NULL);

	BOOL bRet = FALSE;

	SC_HANDLE hServiceMgr = NULL;//SCM管理器的句柄
	SC_HANDLE hServiceDDK = NULL;//NT驱动程序的服务句柄

	//打开服务控制管理器
	hServiceMgr = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);

	if (hServiceMgr == NULL)
	{
		//OpenSCManager失败
		printf("OpenSCManager() Faild %d ! \n", GetLastError());
		bRet = FALSE;
		goto BeforeLeave;
	}
	else
	{
		//OpenSCManager成功
			printf("OpenSCManager() ok ! \n");
	}

	//创建驱动所对应的服务
	hServiceDDK = CreateService(hServiceMgr,
		lpszDriverName, //驱动程序的在注册表中的名字 
		lpszDriverName, // 注册表驱动程序的 DisplayName 值 
		SERVICE_ALL_ACCESS, // 加载驱动程序的访问权限 
		SERVICE_KERNEL_DRIVER,// 表示加载的服务是驱动程序 
		SERVICE_DEMAND_START, // 注册表驱动程序的 Start 值 
		SERVICE_ERROR_IGNORE, // 注册表驱动程序的 ErrorControl 值 
		szDriverImagePath, // 注册表驱动程序的 ImagePath 值 
		NULL,
		NULL,
		NULL,
		NULL,
		NULL);

	DWORD dwRtn;
	//判断服务是否失败
	if (hServiceDDK == NULL)
	{
		dwRtn = GetLastError();
		if (dwRtn != ERROR_IO_PENDING && dwRtn != ERROR_SERVICE_EXISTS)
		{
			//由于其他原因创建服务失败
			printf("CrateService() Faild %d ! \n", dwRtn);
			bRet = FALSE;
			goto BeforeLeave;
		}
		else
		{
			//服务创建失败，是由于服务已经创立过
			printf("CrateService() Faild Service is ERROR_IO_PENDING or ERROR_SERVICE_EXISTS! \n");
		}

		// 驱动程序已经加载，只需要打开 
		hServiceDDK = OpenService(hServiceMgr, lpszDriverName, SERVICE_ALL_ACCESS);
		if (hServiceDDK == NULL)
		{
			//如果打开服务也失败，则意味错误
			dwRtn = GetLastError();
			printf("OpenService() Faild %d ! \n", dwRtn);
			bRet = FALSE;
			goto BeforeLeave;
		}
		else
		{
			printf("OpenService() ok ! \n");
		}
	}
	else
	{
		printf("CrateService() ok ! \n");
	}

	//开启此项服务
	bRet = StartService(hServiceDDK, NULL, NULL);
	if (!bRet)
	{
		DWORD dwRtn = GetLastError();
		if (dwRtn != ERROR_IO_PENDING && dwRtn != ERROR_SERVICE_ALREADY_RUNNING)
		{
			printf("StartService() Faild %d ! \n", dwRtn);
			bRet = FALSE;
			goto BeforeLeave;
		}
		else
		{
			if (dwRtn == ERROR_IO_PENDING)
			{
				//设备被挂住
				printf("StartService() Faild ERROR_IO_PENDING ! \n");
				bRet = FALSE;
				goto BeforeLeave;
			}
			else
			{
				//服务已经开启
				printf("StartService() Faild ERROR_SERVICE_ALREADY_RUNNING ! \n");
				bRet = TRUE;
				goto BeforeLeave;
			}
		}
	}
	bRet = TRUE;
	//离开前关闭句柄
BeforeLeave:
	if (hServiceDDK)
	{
		CloseServiceHandle(hServiceDDK);
	}
	if (hServiceMgr)
	{
		CloseServiceHandle(hServiceMgr);
	}
	return bRet;
}




//卸载驱动程序 
BOOL UnloadNTDriver(char * szSvrName)
{
	BOOL bRet = FALSE;
	SC_HANDLE hServiceMgr = NULL;//SCM管理器的句柄
	SC_HANDLE hServiceDDK = NULL;//NT驱动程序的服务句柄
	SERVICE_STATUS SvrSta;
	//打开SCM管理器
	hServiceMgr = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
	if (hServiceMgr == NULL)
	{
		//带开SCM管理器失败
		printf("OpenSCManager() Faild %d ! \n", GetLastError());
		bRet = FALSE;
		goto BeforeLeave;
	}
	else
	{
		//带开SCM管理器失败成功
		printf("OpenSCManager() ok ! \n");
	}
	//打开驱动所对应的服务
	hServiceDDK = OpenService(hServiceMgr, szSvrName, SERVICE_ALL_ACCESS);

	if (hServiceDDK == NULL)
	{
		//打开驱动所对应的服务失败
		printf("OpenService() Faild %d ! \n", GetLastError());
		bRet = FALSE;
		goto BeforeLeave;
	}
	else
	{
		printf("OpenService() ok ! \n");
	}
	//停止驱动程序，如果停止失败，只有重新启动才能，再动态加载。 
	if (!ControlService(hServiceDDK, SERVICE_CONTROL_STOP, &SvrSta))
	{
		printf("ControlService() Faild %d !\n", GetLastError());
	}
	else
	{
		//打开驱动所对应的失败
		printf("ControlService() ok !\n");
	}
	//动态卸载驱动程序。 
	if (!DeleteService(hServiceDDK))
	{
		//卸载失败
		printf("DeleteSrevice() Faild %d !\n", GetLastError());
	}
	else
	{
		//卸载成功
		printf("DelServer:eleteSrevice() ok !\n");
	}
	bRet = TRUE;
BeforeLeave:
	//离开前关闭打开的句柄
	if (hServiceDDK)
	{
		CloseServiceHandle(hServiceDDK);
	}
	if (hServiceMgr)
	{
		CloseServiceHandle(hServiceMgr);
	}
	return bRet;
}


BOOL CMyMfcDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码
	Resourceloading("Mocode.sys", IDR_SYS2, "SYS");

	Sleep(2000); 

	
	
	CWnd* Game_Wnd = FindWindow(NULL, "地下城与勇士");


	if (!Game_Wnd)
	{
		AfxMessageBox("[ 地下城与勇士 ] 未运行，程序初始化失败");

		this->OnOK();
	}

	int bat;
	BOOL bRet = LoadNTDriver("Mocode.sys", "Mocode.sys");
	if (!bRet)
	{
		bat = MessageBox("驱动加载失败，请检查是否杀软拦截或重启计算机，则还不行，请自行卡图标!\t\n电脑自带图标请点击[ 是 ]，没有请点击 [ 否 ]，请自行卡图标，重新运行程序！", "凉城", MB_YESNO | MB_ICONERROR);
		if (bat == IDNO)
		{
			this->OnOK();
		}
	
	}

	if (bRet == true)
	{

		MessageBox("驱动加载成功", "凉城", MB_OK | MB_ICONINFORMATION);

	}
	//加载成功


	
	 ::GetWindowThreadProcessId(Game_Wnd->m_hWnd, &Pid);

	 CString Text;
	 Text.Format("GamePid：%d", Pid);

	 this->SetWindowTextA(Text);
	 Game_Handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, Pid);


	 if (!Game_Handle)
	 {
		 AfxMessageBox("打开游戏进程失败,请管理员身份运行我！！！");
		 this->OnOK();
	 }
		 
	



	/* AllocConsole();

	 FILE* Ftp = freopen("CONOUT$", "w", stdout);

*/



	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CMyMfcDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CMyMfcDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CMyMfcDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


void CMyMfcDlg::OnBnClickedButton1()
{

  //卡邮件

	UINT 人物指针 = ReadLONG(0X14B714B30);
	人物指针 += 0x9EB0;
	人物指针  = ReadLONG(人物指针);
	人物指针 += 0x80;
	人物指针 = ReadLONG(人物指针);
	人物指针 += 0x30;
	人物指针 = ReadLONG(人物指针);
	人物指针 += 0x30;
	//Writeint(人物指针, 100090444);
	WriteINT(人物指针, 100090444);
	MessageBox("符咒初始化成功", "凉城", MB_OK | MB_ICONINFORMATION);


	// TODO: 在此添加控件通知处理程序代码
}

void CMyMfcDlg::停止符咒()
{
	UINT 部位 = ReadLONG(0X14B714B30);
	部位 += 0x9EB0;
	部位 = ReadLONG(部位);
	部位 += 0x80;
	部位 = ReadLONG(部位);
	部位 += 0x30;
	部位 = ReadLONG(部位);
	部位 += 0xBD8;
	WriteINT(部位, 16);
}

void CMyMfcDlg::符咒全屏()
{
	UpdateData(true);

	UINT 部位 = ReadLONG(0X14B714B30);
	部位 += 0x9EB0;
	部位 = ReadLONG(部位);
	部位 += 0x80;
	部位 = ReadLONG(部位);
	部位 += 0x30;
	部位 = ReadLONG(部位);
	部位 += 0xBD8;
	WriteINT(部位, 31);


	//符咒伤害
	UINT 伤害2 = ReadLONG(0X14B714B30);
	伤害2 += 0x9EB0;
	伤害2 = ReadLONG(伤害2);
	伤害2 += 0x80;
	伤害2 = ReadLONG(伤害2);
	伤害2 += 0x30;
	伤害2 = ReadLONG(伤害2);
	伤害2 += 0x1248;
	伤害2 = ReadLONG(伤害2);
	伤害2 += 0xB0;
	伤害2 = ReadLONG(伤害2);
	伤害2 += 0x8;
	伤害2 = ReadLONG(伤害2);
	伤害2 += 0x58;
	伤害2 = ReadLONG(伤害2);
	伤害2 += 0x1c;
	printf("伤害：%p\n", 伤害2);
	WriteFLOAT(伤害2, (double)_atoi64(伤害1));


	//符咒频率
	UINT 频率 = ReadLONG(0X14B714B30);
	频率 += 0x9EB0;
	频率 = ReadLONG(频率);
	频率 += 0x80;
	频率 = ReadLONG(频率);
	频率 += 0x30;
	频率 = ReadLONG(频率);
	频率 += 0x1248;
	频率 = ReadLONG(频率);
	频率 += 0x88;
	频率 = ReadLONG(频率);
	频率 += 0x30;
	频率 = ReadLONG(频率);
	频率 += 0x4;
	printf("频率：%p\n", 频率);
	WriteINT(频率, _atoi64(伤害));

	UINT 几率 = ReadLONG(0X14B714B30);
	几率 += 0x9EB0;
	几率 = ReadLONG(几率);
	几率 += 0x80;
	几率 = ReadLONG(几率);
	几率 += 0x30;
	几率 = ReadLONG(几率);
	几率 += 0x1248;
	几率 = ReadLONG(几率);
	几率 += 0xB0;
	几率 = ReadLONG(几率);
	几率 += 0x8;
	几率 = ReadLONG(几率);
	几率 += 0x30;
	几率 = ReadLONG(几率);
	几率 += 0x4;
	printf("几率:%p\n", 几率);
	Writefloat(几率, (double)100);


	UINT 触发 = ReadLONG(0X14B714B30);
	触发 += 0x9EB0;
	触发 = ReadLONG(触发);
	触发 += 0x80;
	触发 = ReadLONG(触发);
	触发 += 0x30;
	触发 = ReadLONG(触发);
	触发 += 0x1248;
	触发 = ReadLONG(触发);
	触发 += 0x88;
	触发 = ReadLONG(触发);
	触发 += 0x8;
	触发 = ReadLONG(触发);
	printf("触发：%p\n", 触发);
	WriteINT(触发, _atoi64(方式));


	UINT 代码 = ReadLONG(0X14B714B30);
	代码 += 0x9EB0;
	代码 = ReadLONG(代码);
	代码 += 0x80;
	代码 = ReadLONG(代码);
	代码 += 0x30;
	代码 = ReadLONG(代码);
	代码 += 0x1248;
	代码 = ReadLONG(代码);
	代码 += 0xb0;
	代码 = ReadLONG(代码);
	代码 += 0x8;
	代码 = ReadLONG(代码);
	代码 += 0x58;
	代码 = ReadLONG(代码);
	代码 += 0x0c;

	printf("代码：%p\n", 代码);
	Writefloat(代码, (float)_atoi64(code));


	UINT 全屏 = ReadLONG(0x14B714B30);

	全屏 += 0x9EB0;
	全屏 = ReadLONG(全屏);
	全屏 += 0x80;
	全屏 = ReadLONG(全屏);
	全屏 += 0x30;
	全屏 = ReadLONG(全屏);
	全屏 += 0x1248;
	全屏 = ReadLONG(全屏);
	全屏 += 0xb0;
	全屏 = ReadLONG(全屏);
	全屏 += 0x8;
	全屏 = ReadLONG(全屏);
	全屏 += 0x8;
	全屏 = ReadLONG(全屏);
	全屏 += 0x4;
	printf("全屏：%p\n", 全屏);
	Writefloat(全屏, (float)4);

	UINT star = ReadLONG(0X14B714B30);
	star += 0x9EB0;
	star = ReadLONG(star);
	star += 0x80;
	star = ReadLONG(star);
	star += 0x30;
	star = ReadLONG(star);
	star += 0x1248;
	star = ReadLONG(star);
	star += 0xb0;
	star = ReadLONG(star);
	star += 0x8;
	star = ReadLONG(star);
	star += 0x58;
	star = ReadLONG(star);
	star += 0x8;
	printf("star：%p\n", star);
	Writefloat(star, (float)-1);

}

void CMyMfcDlg::OnBnClickedButton2()
{
	CString flg;
	pButton.GetWindowTextA(flg);
	if (flg == "激活符咒")
	{
		pButton.SetWindowTextA("停止符咒");
		SetTimer(1, 1500, NULL);
		
	}

	if (flg == "停止符咒")
	{
		pButton.SetWindowTextA("激活符咒");
		停止符咒();
		KillTimer(1);

	}


	// TODO: 在此添加控件通知处理程序代码
}


void CMyMfcDlg::OnBnClickedButton3()
{

	UINT 被减 = 0;

	UINT 减少 = ReadLONG(0X14B714B30);
	减少 += 0x9EB0;
	减少 = ReadLONG(减少);
	减少 += 0x80;
	减少 = ReadLONG(减少);
	减少 += 0x30;
	减少 = ReadLONG(减少);
	减少 += 0x10;
	被减 = 减少;
	减少 = ReadLONG(被减);

	减少 -= 100000;
	WriteINT(被减, 减少);



	// TODO: 在此添加控件通知处理程序代码
}




void CMyMfcDlg::OnTimer(UINT_PTR nIDEvent)
{
	// TODO:  在此添加消息处理程序代码和/或调用默认值




	switch (nIDEvent)
	{

	case 1:
	{
			  符咒全屏();

			  break;

	}


	}




	CDialogEx::OnTimer(nIDEvent);
}


void CMyMfcDlg::On32772()

{

	MessageBox("1.驱动加载失败就请自行卡图标\t\n2.Win10系统请管理员运行\t\n3.在游戏内初始化符咒,材料或消耗品放在物品栏4上,不能少于2个以上,自己进行卡邮件操作，会玩的自然懂！\t\n4.本软件只用于学习交流纯属免费使用，请在24小时内自行删除，出现任何问题本人概不负责！", "By：凉城", MB_OK | MB_ICONINFORMATION);
	// TODO:  在此添加命令处理程序代码
}


void CMyMfcDlg::OnDestroy()
{

	UnloadNTDriver("Mocode.sys");
	CDialogEx::OnDestroy();

	// TODO:  在此处添加消息处理程序代码
}
